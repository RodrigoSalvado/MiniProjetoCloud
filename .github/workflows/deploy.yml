name: Build and Deploy to Azure (Terraform + Function App + Web App)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './redditIngestFunc'
  FUNCTIONAPP_NAME: 'propjetocloudfunctionapp'
  REGISTRY: docker.io
  IMAGE_NAME: rodrig0salv/minha-app
  TAG: latest
  PLATFORM: linux/amd64
  WEBAPP_NAME: 'reddit-app'
  TERRAFORM_DIR: './infra'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Login no Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Criar Storage Account e container 'tfstate' se necess√°rio
        run: |
          RG_EXISTS=$(az group exists --name terraform-cloud)
          if [ "$RG_EXISTS" = "false" ]; then
            az group create --name terraform-cloud --location northeurope
          fi

          ACCOUNT_EXISTS=$(az storage account check-name --name storageprojetocloud --query "nameAvailable" -o tsv)
          if [ "$ACCOUNT_EXISTS" = "true" ]; then
            az storage account create \
              --name storageprojetocloud \
              --resource-group terraform-cloud \
              --location northeurope \
              --sku Standard_LRS
          fi

          ACCOUNT_KEY=$(az storage account keys list \
            --account-name storageprojetocloud \
            --resource-group terraform-cloud \
            --query '[0].value' -o tsv)

          az storage container create \
            --name tfstate \
            --account-name storageprojetocloud \
            --account-key "$ACCOUNT_KEY" \
            --public-access off

      - name: Exportar vari√°veis ARM
        run: |
          echo "ARM_CLIENT_ID=$(az ad signed-in-user show --query 'id' -o tsv)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(az account show --query 'id' -o tsv)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(az account show --query 'tenantId' -o tsv)" >> $GITHUB_ENV

      - name: Inicializar Terraform
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Purgar conta Translator eliminada (se necess√°rio)
        run: |
          az cognitiveservices account purge \
            --name translator-service \
            --resource-group terraform-cloud \
            --location northeurope || echo "Nada para purgar"

      - name: Importar recursos se n√£o existirem no estado
        run: |
          cd ${{ env.TERRAFORM_DIR }}

          check_and_import () {
            local name="$1"
            local id="$2"

            echo "üîç A verificar $name..."
            if terraform state list | grep -q "$name"; then
              echo "‚úÖ $name j√° est√° no estado. A ignorar."
            else
              echo "‚û°Ô∏è A importar $name..."
              terraform import "$name" "$id" || echo "‚ö†Ô∏è $name ainda n√£o existe no Azure. A ignorar."
            fi
          }

          check_and_import azurerm_resource_group.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud
          check_and_import azurerm_storage_account.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Storage/storageAccounts/storageprojetocloud
          check_and_import azurerm_storage_container.tfstate https://storageprojetocloud.blob.core.windows.net/tfstate
          check_and_import azurerm_cognitive_account.translator /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.CognitiveServices/accounts/translator-service
          check_and_import azurerm_virtual_network.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/virtualNetworks/cloudvnet
          check_and_import azurerm_subnet.app /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/virtualNetworks/cloudvnet/subnets/subnetappname
          check_and_import azurerm_subnet.priv /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/virtualNetworks/cloudvnet/subnets/subnetprivname
          check_and_import azurerm_public_ip.nat /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/publicIPAddresses/nat-ip
          check_and_import azurerm_nat_gateway.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/natGateways/nat-gateway
          check_and_import azurerm_subnet_nat_gateway_association.app /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/virtualNetworks/cloudvnet/subnets/subnetappname/natGatewayAssociation
          check_and_import azurerm_cosmosdb_account.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.DocumentDB/databaseAccounts/terraformcloudcosmosdb
          check_and_import azurerm_cosmosdb_sql_database.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.DocumentDB/databaseAccounts/terraformcloudcosmosdb/sqlDatabases/RedditApp
          check_and_import azurerm_cosmosdb_sql_container.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.DocumentDB/databaseAccounts/terraformcloudcosmosdb/sqlDatabases/RedditApp/containers/posts
          check_and_import azurerm_service_plan.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Web/serverFarms/asp-project-cloud
          check_and_import azurerm_linux_web_app.web /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Web/sites/reddit-app
          check_and_import azurerm_linux_function_app.main /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Web/sites/propjetocloudfunctionapp
          check_and_import azurerm_private_endpoint.cosmos /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/terraform-cloud/providers/Microsoft.Network/privateEndpoints/pe-cosmos

      - name: Validar Terraform
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Aplicar Terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}


  build:
    runs-on: ubuntu-latest
    needs: terraform
    permissions:
      contents: read

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Criar e ativar ambiente virtual
        run: |
          python${{ env.PYTHON_VERSION }} -m venv venv
          source venv/bin/activate

      - name: Instalar depend√™ncias da Function
        run: pip install -r ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt

      - name: Zip Function App
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          zip -r ../release.zip .

      - name: Guardar Function App como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.AZUREAPPSERVICE_CONTAINERUSERNAME_05F08B3D5D3A42788F364682EB18570A }}
          password: ${{ secrets.AZUREAPPSERVICE_CONTAINERPASSWORD_3C476478AD3749ADBF692BA277661C71 }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./web-app
          file: ./web-app/Dockerfile
          platforms: ${{ env.PLATFORM }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Recuperar artefacto da Function App
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Descompactar Function App
        run: unzip release.zip -d ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: Login no Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Adicionar CORS √† Function App (https://portal.azure.com)
        run: |
          az functionapp cors add \
            --name ${{ env.FUNCTIONAPP_NAME }} \
            --resource-group terraform-cloud \
            --allowed-origins https://portal.azure.com

      - name: For√ßar vers√£o do runtime Python na Function App
        run: |
          az functionapp config set \
            --name ${{ env.FUNCTIONAPP_NAME }} \
            --resource-group terraform-cloud \
            --linux-fx-version "Python|${{ env.PYTHON_VERSION }}"

      - name: Instalar Azure Functions Core Tools
        run: npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Instalar depend√™ncias da Function App (no deploy)
        run: pip install -r ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt

      - name: Fazer deploy da Function App
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          func azure functionapp publish ${{ env.FUNCTIONAPP_NAME }} --python --force

      - name: Configurar Web App para usar imagem Docker
        run: |
          az webapp config container set \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group terraform-cloud \
            --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} \
            --docker-registry-server-url https://${{ env.REGISTRY }}

      - name: Reiniciar Web App
        run: |
          az webapp restart \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group terraform-cloud
